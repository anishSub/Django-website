from django.shortcuts import render, redirect,get_object_or_404
from store.models import Product, Variation
from carts.models import Cart, CartItem
from django.http import HttpResponse
from django.core.exceptions import ObjectDoesNotExist
from django.db import transaction


# Retrieves the session key from request.session.session_key. The session key is a unique string generated by Django’s session framework to identify a user’s session (stored in a cookie named sessionid by default).
# Purpose: This key is used as the cart_id to associate a Cart object with the user’s session, allowing the cart to persist across requests without requiring user authentication.


def _cart_id(request):
    
    if not request.session.session_key:#Checks if the session_key attribute of request.session is None or empty.
        request.session.save()#If no session_key exists, calls save() to create a new session and generate a session_key.
    cart_id = request.session.session_key.strip()  #  Retrieves the session_key and uses strip() to remove any leading or trailing whitespace, preventing mismatches in the cart_id field (a potential cause of the issue where the cart view can’t find the Cart).
    # print("Session Key in _cart_id:", cart_id)
    return cart_id




#This view handles adding a product to the user’s cart or incrementing the quantity of an existing product in the cart.
# def add_cart(request,product_id):#we wra going to add procust insode the cart so we need product_id

def add_cart(request, product_id):
    product = Product.objects.get(id=product_id)
    product_variation=[]
    if request.method == 'POST':
        for item in request.POST:
            key=item
            value=request.POST[key]
            
            try: 
                variation=Variation.objects.get(product=product,variation_category__iexact=key, variation_value__iexact=value)
                product_variation.append(variation)
            except:
                pass    
            
#for item in request.POST:
# request.POST is a dictionary-like object (QueryDict) containing all the key-value pairs submitted in the form via the POST method.
# For example, if a form has fields like <input name="color" value="red">, request.POST will contain {'color': 'red', ...}.
# The for item in request.POST loop iterates over the keys of the request.POST dictionary.
# key = item:
# item is the key of each key-value pair in request.POST.
# For each iteration, key is assigned the current form field name (e.g., color, size).
# value = request.POST[key]:
# request.POST[key] retrieves the value associated with the key from the form submission.
# For example, if the form has <input name="color" value="red">, then key = 'color' and value = 'red'.
            
        #*uncomment
    # try:
    #     product = Product.objects.get(id=product_id)#Queries the Product model to retrieve a single Product object with the given product_id. objects.get() returns exactly one object or raises Product.DoesNotExist if none is found.
    #     # print("Found product:", product.product_name)
    # except Product.DoesNotExist:
    #     # print("Product not found for ID:", product_id)
    #     return redirect('cart')
    #   #Redirects to the cart page (URL name 'cart', mapped to /cart/) if the product isn’t found, preventing further processing.
        #*end

    cart_id = _cart_id(request)#Calls _cart_id to get the session key, which is used as the cart_id for the Cart object 
    # print("Cart ID in add_cart:", cart_id)
    
    with transaction.atomic():
      #Starts a database transaction using transaction.atomic(). All database operations within this block (cart and cart item creation/updates) are executed as a single unit, ensuring consistency (either all succeed or none are applied).
        try:#
            cart = Cart.objects.get(cart_id=cart_id)
            # print("Found existing cart:", cart.cart_id)
        except Cart.DoesNotExist:
            cart = Cart.objects.create(cart_id=cart_id)
            # print("New cart created:", cart.cart_id)
            cart.save()
            
        is_cart_item_exists=CartItem.objects.filter(product=product, cart=cart).exists()
        if is_cart_item_exists :
            cart_items = CartItem.objects.filter(product=product, cart=cart)#Queries the CartItem model to find a CartItem linked to the product and cart. Raises CartItem.DoesNotExist if none exists.
            #existing_variations...> database
            #current cariance ...> product_variation
            # team_id---> database
            
            ex_var_list = []
            id_list = []
            for item in cart_items:
                existing_variance = list(item.variations.all())
                ex_var_list.append(existing_variance)
                id_list.append(item.id)
                
            print(ex_var_list) 
            
            if product_variation in ex_var_list:
                #incerase quantity
                index=ex_var_list.index(product_variation)
                item_id = id_list [index]
                item=CartItem.objects.get(product=product, id=item_id)
                item.quantity += 1
                item.save()

            else:
                item = CartItem.objects.create(
                    product=product,
                    quantity=1,
                    cart=cart,
                )
                
                if len(product_variation)>0:
                    item.variations.clear()
                    item.variations.add(*product_variation)
            # cart_item.quantity += 1
                item.save()#Saves the updated CartItem to the database.
            # print("Updated cart item:", cart_item.product.product_name, cart_item.quantity)  
            
            
        else : 
            cart_item = CartItem.objects.create(
                product=product,
                quantity=1,
                cart=cart,
                is_active=True
            )
            if len(product_variation)>0:
                cart_item.variations.clear()
                cart_item.variations.add(*product_variation)
            cart_item.save()
            # print("New cart item created:", cart_item.product.product_name)

    return redirect('cart')
    
    
    
    
def remove_cart(request, product_id,cart_item_id):#this is for decreasing the item quantity in the cart 
  cart = Cart.objects.get(cart_id= _cart_id(request))
  product = get_object_or_404(Product,id=product_id)
  
  try:
    cart_item = CartItem.objects.get(product=product,cart=cart, id=cart_item_id)
    if cart_item.quantity > 1:
        cart_item.quantity -= 1
        cart_item.save()
    else:
        cart_item.delete()
        
  except:
    pass
    
  return redirect('cart')
    
    
def remove_cart_item(request,product_id,cart_item_id):#for removing the item from the cart
  cart = Cart.objects.get(cart_id = _cart_id(request))
  product = get_object_or_404(Product, id=product_id)
  cart_item = CartItem.objects.get(product=product, cart=cart, id=cart_item_id)
  cart_item.delete()
  return redirect('cart')
    
    
    

#The cart view renders a page (store/cart.html) that displays the user’s shopping cart, including all active items, the total number of items, and the total price.
# total=0: A default parameter initializing the total price of cart items to 0.
# quantity=0: A default parameter initializing the total number of items to 0.
# cart_items=None: A default parameter initializing the list of cart items to None.



def cart(request, total=0, quantity=0, cart_items=None):
    tax = 0  # Initializes tax to avoid UnboundLocalError.
    grand_total = 0  # Initializes grand_total to avoid UnboundLocalError.
    cart = None  # Initializes cart for context.
    cart_id = _cart_id(request)
    # print("Cart ID in cart view:", cart_id)
    
    try:
        cart = Cart.objects.get(cart_id=cart_id)
        # print("Cart found in cart view:", cart.cart_id)
        cart_items = CartItem.objects.filter(cart=cart, is_active=True)
        print("Cart Items:", [(item.product.product_name, item.quantity) for item in cart_items])
        for cart_item in cart_items:
            total += (cart_item.product.price * cart_item.quantity)
            quantity += cart_item.quantity
            tax= (2 * total)/100
            grand_total = total + tax
    except ObjectDoesNotExist:
        print("No cart found for this session.")
        # Debug: Check all carts in the database
        all_carts = Cart.objects.all()
        print("All carts in database:", [c.cart_id for c in all_carts])
        cart_items = []

    context = {
        'total': total,
        'quantity': quantity,
        'cart_items': cart_items,
        'tax': tax,
        'grand_total': grand_total,
    }
    return render(request, 'store/cart.html', context)


# #def cart(request, total=0, quantity=0, cart_items=None):
#     # View to render the cart page, displaying all active cart items, total price, and total quantity.
#     # Parameters: total (default 0), quantity (default 0), cart_items (default None).
#     cart_id = _cart_id(request)
#     # Gets the session-based cart_id using the _cart_id function.
#     print("Cart ID in cart view:", cart_id)
#     # Prints cart_id for debugging to ensure it matches add_cart's cart_id.
#     try:
#         # Starts a try block to handle cases where the Cart doesn't exist.
#         cart = Cart.objects.get(cart_id=cart_id)
#         # Queries Cart model to retrieve a single Cart matching cart_id.
#         print("Cart found in cart view:", cart.cart_id)
#         # Prints the found cart's cart_id for debugging (e.g., "Cart found in cart view: wft4kux35tcb28pm2yrfckpprby0wwln").
#         cart_items = CartItem.objects.filter(cart=cart, is_active=True)
#         # Queries CartItem model for all active items linked to the cart.
#         print("Cart Items:", [(item.product.product_name, item.quantity) for item in cart_items])
#         # Prints a list of (product_name, quantity) tuples for debugging (e.g., [('ATX JEANS', 15), ...]).
#         for cart_item in cart_items:
#             # Iterates over each CartItem in the queryset.
#             total += (cart_item.product.price * cart_item.quantity)
#             # Calculates cost (product price * quantity) and adds to total. Assumes price is a numeric field.
#             quantity += cart_item.quantity
#             # Adds the CartItem's quantity to the total quantity (e.g., 15 + 3 + 1 + 1 = 20).
#     except ObjectDoesNotExist:
#         # Catches ObjectDoesNotExist if no Cart is found (the issue in your logs).
#         print("No cart found for this session.")
#         # Prints error for debugging.
#         all_carts = Cart.objects.all()
#         # Queries all Cart objects to check for cart_id mismatches.
#         print("All carts in database:", [c.cart_id for c in all_carts])
#         # Prints all cart_id values for debugging (e.g., ['wft4kux35tcb28pm2yrfckpprby0wwln']).
#         cart_items = []
#         # Sets cart_items to an empty list to avoid passing None to the template.

#     context = {
#         'total': total,
#         # Total price of all cart items (0 if no cart found).
#         'quantity': quantity,
#         # Total number of items (0 if no cart found).
#         'cart_items': cart_items
#         # Queryset of CartItem objects or empty list, passed to the template.
#     }
#     return render(request, 'store/cart.html', context)
#     # Renders the store/cart.html template with the context, returning the HTML response.